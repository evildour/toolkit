============== file: README.md ==============
# Node.js Client for Google Example Library API ([Alpha](https://github.com/GoogleCloudPlatform/google-cloud-node#versioning))

[Google Example Library API][Product Documentation]:
A simple Google Example Library API.
- [Client Library Documentation][]
- [Product Documentation][]

## Quick Start
In order to use this library, you first need to go through the following
steps:

1. [Select or create a Cloud Platform project.](https://console.cloud.google.com/project)
2. [Enable the Google Example Library API.](https://console.cloud.google.com/apis/api/library)
3. [Setup Authentication.](https://googlecloudplatform.github.io/google-cloud-node/#/docs/google-cloud/master/guides/authentication)

### Installation
```
$ npm install --save @google-cloud/library
```

### Preview
#### LibraryServiceClient
```js
 var library = require('@google-cloud/library');

 var client = library({
    // optional auth parameters.
 });

 var formattedName = client.bookPath("testShelf-" + Date.now().toString(), projectId);
 var rating = library.v1.types.Book.Rating.GOOD;
 var book = {
     rating : rating
 };
 var request = {
     name: formattedName,
     book: book
 };
 client.updateBook(request).then(function(responses) {
     var response = responses[0];
     // doThingsWith(response)
 })
 .catch(function(err) {
     console.error(err);
 });
```

### Next Steps
- Read the [Client Library Documentation][] for Google Example Library API
  to see other available methods on the client.
- Read the [Google Example Library API Product documentation][Product Documentation]
  to learn more about the product and see How-to Guides.
- View this [repository's main README](https://github.com/GoogleCloudPlatform/google-cloud-node/blob/master/README.md)
  to see the full list of Cloud APIs that we cover.

[Client Library Documentation]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/library
[Product Documentation]: https://cloud.google.com/library
============== file: package.json ==============
{
  "repository": "GoogleCloudPlatform/google-cloud-node",
  "name": "@google-cloud/library",
  "version": "0.7.1",
  "author": "Google, Inc.",
  "description": "Google Example Library API client for Node.js",
  "main": "src/index.js",
  "files": [
    "protos",
    "src",
    "AUTHORS",
    "COPYING"
  ],
  "keywords": [
    "google apis client",
    "google api client",
    "google apis",
    "google api",
    "google",
    "google cloud platform",
    "google cloud",
    "cloud",
    "google library",
    "library",
    "Google Example Library API"
  ],
  "dependencies": {
    "google-gax": "^0.14.0",
    "google-some-other-package-v1": "^0.2.1",
    "lodash.merge": "^4.6.0",
    "protobufjs": "^6.8.0"
  },
  "devDependencies": {
    "mocha": "^3.2.0",
    "through2": "^2.0.3"
  },
  "scripts": {
    "publish-module": "node ../../scripts/publish.js library",
    "smoke-test": "mocha smoke-test/*.js --timeout 5000",
    "test": "mocha test/*.js"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=4.0.0"
  }
}

============== file: smoke-test/library_service_smoke_test.js ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';

describe('LibraryServiceSmokeTest', function() {
  if (!process.env.SMOKE_TEST_PROJECT) {
    throw new Error("Usage: SMOKE_TEST_PROJECT=<project_id> node #{$0}");
  }
  var projectId = process.env.SMOKE_TEST_PROJECT;

  it('successfully makes a call to the service', function(done) {
    var library = require('../src');

    var client = library.v1({
      // optional auth parameters.
    });

    var formattedName = client.bookPath("testShelf-" + Date.now().toString(), projectId);
    var rating = library.v1.types.Book.Rating.GOOD;
    var book = {
        rating : rating
    };
    var request = {
        name: formattedName,
        book: book
    };
    client.updateBook(request).then(function(responses) {
        var response = responses[0];
        console.log(response);
    })
    .then(done)
    .catch(done);
  });
});
============== file: src/index.js ==============
/**
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

const VERSION = require('../package.json').version;

// Import the clients for each version supported by this package.
var gapic = {
  v1: require('./v1'),
};

module.exports = gapic.v1;
module.exports.v1 = gapic.v1;
module.exports.default = Object.assign({}, module.exports);

============== file: src/v1/index.js ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';

const LibraryServiceClient = require('./library_service_client');

module.exports.LibraryServiceClient = LibraryServiceClient;

============== file: src/v1/library_service_client.js ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

const configData = require('./library_service_client_config');
const gax = require('google-gax');
const merge = require('lodash.merge');
const path = require('path');
const protobuf = require('protobufjs');

/**
 * This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of {@link Shelf}
 *   resources, named ``bookShelves/*``
 *
 * - Each Shelf has a collection of {@link Book}
 *   resources, named `bookShelves/*/books/*`
 *
 * Check out [cloud docs!](https://cloud.google.com/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: <>&"`'@.
 *
 *
 * @class
 */
class LibraryServiceClient {
  constructor(opts) {
    // Ensure that options include the service address and port.
    opts = Object.assign({
      clientConfig: {},
      port: this.constructor.port,
      servicePath: this.constructor.servicePath,
    }, opts);

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    Object.assign(opts, {scopes: this.constructor.scopes});
    var gaxGrpc = gax.grpc(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = gaxGrpc.auth;

    // Determine the client header string.
    var clientHeader = [
      `gl-node/${process.version.node}`,
      `grpc/${gaxGrpc.grpcVersion}`,
      `gax/${gax.version}`,
      `gapic/${this.version}`,
    ];
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }


    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._pageDescriptors = {
      listShelves: new gax.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'shelves'
      ),

      listBooks: new gax.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'books'
      ),

      listStrings: new gax.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'strings'
      ),

      findRelatedBooks: new gax.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'names'
      ),
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this._streamDescriptors = {
      streamShelves: new gax.StreamDescriptor(gax.StreamType.SERVER_STREAMING),

      streamBooks: new gax.StreamDescriptor(gax.StreamType.SERVER_STREAMING),

      discussBook: new gax.StreamDescriptor(gax.StreamType.BIDI_STREAMING),

      monologAboutBook: new gax.StreamDescriptor(gax.StreamType.CLIENT_STREAMING),
    };

    // Some methods on this API support automatically batching
    // requests; denote this.
    var batchingDescriptors = {
      publishSeries: new gax.BundleDescriptor(
        'books',
        [
          'edition',

          'shelf.name',
        ],
        'bookNames',
        gax.createByteLengthFunction(loadedProtos.google.example.library.v1.Book),
      ),

      addComments: new gax.BundleDescriptor(
        'comments',
        [
          'name',
        ],
        null,
        gax.createByteLengthFunction(loadedProtos.google.example.library.v1.Comment),
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    this.operationsClient = new gax.lro({
      auth: gaxGrpc.auth,
      grpc: gaxGrpc.grpc,
    }).operationsClient(opts);

    var protoFilesRoot = new gax.grpc.GoogleProtoFilesRoot();
    protoFilesRoot = protobuf.loadSync(
      path.join(__dirname, '..', '..', 'protos', 'library.proto'),
      protoFilesRoot
    );
    protoFilesRoot = protobuf.loadSync(
      path.join(__dirname, '..', '..', 'protos', 'tagger.proto'),
      protoFilesRoot
    );

    var getBigBookResponse = protoFilesRoot.lookup(
      'google.example.library.v1.Book'
    );
    var getBigBookMetadata = protoFilesRoot.lookup(
      'google.example.library.v1.GetBigBookMetadata'
    );
    var getBigNothingResponse = protoFilesRoot.lookup(
      'google.protobuf.Empty'
    );
    var getBigNothingMetadata = protoFilesRoot.lookup(
      'google.example.library.v1.GetBigBookMetadata'
    );

    this.longrunningDescriptors = {
      getBigBook: new gax.LongrunningDescriptor(
        this.operationsClient,
        getBigBookResponse.decode.bind(getBigBookResponse),
        getBigBookMetadata.decode.bind(getBigBookMetadata)
      ),

      getBigNothing: new gax.LongrunningDescriptor(
        this.operationsClient,
        getBigNothingResponse.decode.bind(getBigNothingResponse),
        getBigNothingMetadata.decode.bind(getBigNothingMetadata)
      ),
    };

    // Put together the default options sent with requests.
    var defaults = gaxGrpc.constructSettings(
      'google.example.library.v1.LibraryService',
      gapicConfig,
      opts.clientConfig,
      {'x-goog-api-client': clientHeader.join(' ')},
    );

    // Load the applicable protos.
    var protos = merge({},
      gaxGrpc.loadProto(
        path.join(__dirname, '..', '..', 'protos'),
        'library.proto'
      ),,
      gaxGrpc.loadProto(
        path.join(__dirname, '..', '..', 'protos'),
        'tagger.proto'
      ),
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.example.library.v1.LibraryService.
    var libraryServiceStub = gaxGrpc.createStub(
      protos.google.example.library.v1.LibraryService,
      opts
    );

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    var libraryServiceStubMethods = [
      'createShelf',
      'getShelf',
      'listShelves',
      'deleteShelf',
      'mergeShelves',
      'createBook',
      'publishSeries',
      'getBook',
      'listBooks',
      'deleteBook',
      'updateBook',
      'moveBook',
      'listStrings',
      'addComments',
      'getBookFromArchive',
      'getBookFromAnywhere',
      'getBookFromAbsolutelyAnywhere',
      'updateBookIndex',
      'streamShelves',
      'streamBooks',
      'discussBook',
      'monologAboutBook',
      'findRelatedBooks',
      'addTag',
      'getBigBook',
      'getBigNothing',
      'testOptionalRequiredFlatteningParams',
    ];
    for (let methodName of libraryServiceStubMethods) {
      this._innerApiCalls[methodName] = gax.createApiCall(
        libraryServiceStub.then(stub => function() {
          var args = Array.prototype.slice.call(arguments, 0);
          return stub[methodName].apply(stub, args);
        }),
        defaults[methodName],
        PAGE_DESCRIPTORS[methodName] || bundleDescriptors[methodName] || STREAM_DESCRIPTORS[methodName] || self.longrunningDescriptors[methodName]
      );
    }

    // Put together the "service stub" for
    // google.tagger.v1.Labeler.
    var labelerStub = gaxGrpc.createStub(
      protos.google.tagger.v1.Labeler,
      opts
    );

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    var labelerStubMethods = [
      'addLabel',
    ];
    for (let methodName of labelerStubMethods) {
      this._innerApiCalls[methodName] = gax.createApiCall(
        labelerStub.then(stub => function() {
          var args = Array.prototype.slice.call(arguments, 0);
          return stub[methodName].apply(stub, args);
        }),
        defaults[methodName],
        PAGE_DESCRIPTORS[methodName] || bundleDescriptors[methodName] || STREAM_DESCRIPTORS[methodName] || self.longrunningDescriptors[methodName]
      );
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'library-example.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',

      'https://www.googleapis.com/auth/library',
    ];
  }


// Path templates

var SHELF_PATH_TEMPLATE = new gax.PathTemplate(
    'shelves/{shelf_id}');

var BOOK_PATH_TEMPLATE = new gax.PathTemplate(
    'shelves/{shelf_id}/books/{book_id}');

var RETURN_PATH_TEMPLATE = new gax.PathTemplate(
    'shelves/{shelf}/books/{book}/returns/{return}');

/**
 * Returns a fully-qualified shelf resource name string.
 * @param {String} shelfId
 * @returns {String}
 */
LibraryServiceClient.prototype.shelfPath = function(shelfId) {
  return SHELF_PATH_TEMPLATE.render({
    shelf_id: shelfId
  });
};

/**
 * Returns a fully-qualified book resource name string.
 * @param {String} shelfId
 * @param {String} bookId
 * @returns {String}
 */
LibraryServiceClient.prototype.bookPath = function(shelfId, bookId) {
  return BOOK_PATH_TEMPLATE.render({
    shelf_id: shelfId,
    book_id: bookId
  });
};

/**
 * Returns a fully-qualified return resource name string.
 * @param {String} shelf
 * @param {String} book
 * @param {String} return_
 * @returns {String}
 */
LibraryServiceClient.prototype.returnPath = function(shelf, book, return_) {
  return RETURN_PATH_TEMPLATE.render({
    shelf: shelf,
    book: book,
    return: return_
  });
};

/**
 * Parses the shelfName from a shelf resource.
 * @param {String} shelfName
 *   A fully-qualified path representing a shelf resources.
 * @returns {String} - A string representing the shelf_id.
 */
LibraryServiceClient.prototype.matchShelfIdFromShelfName = function(shelfName) {
  return SHELF_PATH_TEMPLATE.match(shelfName).shelf_id;
};

/**
 * Parses the bookName from a book resource.
 * @param {String} bookName
 *   A fully-qualified path representing a book resources.
 * @returns {String} - A string representing the shelf_id.
 */
LibraryServiceClient.prototype.matchShelfIdFromBookName = function(bookName) {
  return BOOK_PATH_TEMPLATE.match(bookName).shelf_id;
};

/**
 * Parses the bookName from a book resource.
 * @param {String} bookName
 *   A fully-qualified path representing a book resources.
 * @returns {String} - A string representing the book_id.
 */
LibraryServiceClient.prototype.matchBookIdFromBookName = function(bookName) {
  return BOOK_PATH_TEMPLATE.match(bookName).book_id;
};

/**
 * Parses the returnName from a return resource.
 * @param {String} returnName
 *   A fully-qualified path representing a return resources.
 * @returns {String} - A string representing the shelf.
 */
LibraryServiceClient.prototype.matchShelfFromReturnName = function(returnName) {
  return RETURN_PATH_TEMPLATE.match(returnName).shelf;
};

/**
 * Parses the returnName from a return resource.
 * @param {String} returnName
 *   A fully-qualified path representing a return resources.
 * @returns {String} - A string representing the book.
 */
LibraryServiceClient.prototype.matchBookFromReturnName = function(returnName) {
  return RETURN_PATH_TEMPLATE.match(returnName).book;
};

/**
 * Parses the returnName from a return resource.
 * @param {String} returnName
 *   A fully-qualified path representing a return resources.
 * @returns {String} - A string representing the return.
 */
LibraryServiceClient.prototype.matchReturnFromReturnName = function(returnName) {
  return RETURN_PATH_TEMPLATE.match(returnName).return;
};

  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback) {
    return this.auth.getProjectId(callback);
  }

  // Service calls

  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: <>&"`'@.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {Object} request.shelf
   *   The shelf to create.
   *
   *   This object should have the same structure as [Shelf]{@link google.example.library.v1.Shelf}
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var shelf = {};
   * client.createShelf({shelf: shelf}).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  createShelf(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.createShelf(request, options, callback);
  };

  /**
   * Gets a shelf.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf to retrieve.
   * @param {string} request.options
   *   To test 'options' parameter name conflict.
   * @param {Object=} request.message
   *   Field to verify that message-type query parameter gets flattened.
   *
   *   This object should have the same structure as [SomeMessage]{@link google.example.library.v1.SomeMessage}
   * @param {Object=} request.stringBuilder
   *   This object should have the same structure as [StringBuilder]{@link google.example.library.v1.StringBuilder}
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.shelfPath("[SHELF_ID]");
   * var options = '';
   * var request = {
   *     name: formattedName,
   *     options: options
   * };
   * client.getShelf(request).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  getShelf(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getShelf(request, options, callback);
  };

  /**
   * Lists shelves.
   *
   * @param {Object=} request
   *   The request object that will be sent.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is Array of [Shelf]{@link google.example.library.v1.Shelf}.
   *
   *   When autoPaginate: false is specified through options, it contains the result
   *   in a single response. If the response indicates the next page exists, the third
   *   parameter is set to be used for the next request object. The fourth parameter keeps
   *   the raw response object of an object representing [ListShelvesResponse]{@link google.example.library.v1.ListShelvesResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Shelf]{@link google.example.library.v1.Shelf}.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Shelf]{@link google.example.library.v1.Shelf} in a single response.
   *   The second element is the next request object if the response
   *   indicates the next page exists, or null. The third element is
   *   an object representing [ListShelvesResponse]{@link google.example.library.v1.ListShelvesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * // Iterate over all elements.
   * client.listShelves({}).then(function(responses) {
   *     var resources = responses[0];
   *     for (var i = 0; i < resources.length; ++i) {
   *         // doThingsWith(resources[i])
   *     }
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   *
   * // Or obtain the paged response.
   *
   * var options = {autoPaginate: false};
   * function callback(responses) {
   *     // The actual resources in a response.
   *     var resources = responses[0];
   *     // The next request if the response shows there's more responses.
   *     var nextRequest = responses[1];
   *     // The actual response object, if necessary.
   *     // var rawResponse = responses[2];
   *     for (var i = 0; i < resources.length; ++i) {
   *         // doThingsWith(resources[i]);
   *     }
   *     if (nextRequest) {
   *         // Fetch the next page.
   *         return client.listShelves(nextRequest, options).then(callback);
   *     }
   * }
   * client.listShelves({}, options)
   *     .then(callback)
   *     .catch(function(err) {
   *         console.error(err);
   *     });
   */
  listShelves(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    if (request === undefined) {
      request = {};
    }
    return this._innerApiCalls.listShelves(request, options, callback);
  };

  /**
   * Equivalent to {@link listShelves}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listShelves} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object=} request
   *   The request object that will be sent.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Shelf]{@link google.example.library.v1.Shelf} on 'data' event.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   *
   * client.listShelvesStream({})
   * .on('data', function(element) {
   *     // doThingsWith(element)
   * }).on('error', function(err) {
   *     console.log(err);
   * });
   */
  listShelvesStream(request, options) {
    options = options || {};
    if (request === undefined) {
      request = {};
    }
    return this._pageDescriptors.listShelves.createStream(
      this._innerApiCalls.listShelves,
      request,
      options
    );
  };

  /**
   * Deletes a shelf.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf to delete.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @returns {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.shelfPath("[SHELF_ID]");
   * client.deleteShelf({name: formattedName}).catch(function(err) {
   *     console.error(err);
   * });
   */
  deleteShelf(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.deleteShelf(request, options, callback);
  };

  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf we're adding books to.
   * @param {string} request.otherShelfName
   *   The name of the shelf we're removing books from and deleting.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.shelfPath("[SHELF_ID]");
   * var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
   * var request = {
   *     name: formattedName,
   *     otherShelfName: formattedOtherShelfName
   * };
   * client.mergeShelves(request).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  mergeShelves(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.mergeShelves(request, options, callback);
  };

  /**
   * Creates a book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf in which the book is created.
   * @param {Object} request.book
   *   The book to create.
   *
   *   This object should have the same structure as [Book]{@link google.example.library.v1.Book}
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Book]{@link google.example.library.v1.Book}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.shelfPath("[SHELF_ID]");
   * var book = {};
   * var request = {
   *     name: formattedName,
   *     book: book
   * };
   * client.createBook(request).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  createBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.createBook(request, options, callback);
  };

  /**
   * Creates a series of books.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {Object} request.shelf
   *   The shelf in which the series is created.
   *
   *   This object should have the same structure as [Shelf]{@link google.example.library.v1.Shelf}
   * @param {Object[]} request.books
   *   The books to publish in the series.
   *
   *   This object should have the same structure as [Book]{@link google.example.library.v1.Book}
   * @param {Object} request.seriesUuid
   *   Uniquely identifies the series to the publishing house.
   *
   *   This object should have the same structure as [SeriesUuid]{@link google.example.library.v1.SeriesUuid}
   * @param {number=} request.edition
   *   The edition of the series
   * @param {boolean=} request.reviewCopy
   *   If the book is in a pre-publish state
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [PublishSeriesResponse]{@link google.example.library.v1.PublishSeriesResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PublishSeriesResponse]{@link google.example.library.v1.PublishSeriesResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var shelf = {};
   * var books = [];
   * var seriesString = 'foobar';
   * var seriesUuid = {
   *     seriesString : seriesString
   * };
   * var request = {
   *     shelf: shelf,
   *     books: books,
   *     seriesUuid: seriesUuid
   * };
   * client.publishSeries(request).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  publishSeries(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.publishSeries(request, options, callback);
  };

  /**
   * Gets a book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Book]{@link google.example.library.v1.Book}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * client.getBook({name: formattedName}).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  getBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBook(request, options, callback);
  };

  /**
   * Lists books in a shelf.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf whose books we'd like to list.
   * @param {number=} request.pageSize
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {string=} request.filter
   *   To test python built-in wrapping.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is Array of [Book]{@link google.example.library.v1.Book}.
   *
   *   When autoPaginate: false is specified through options, it contains the result
   *   in a single response. If the response indicates the next page exists, the third
   *   parameter is set to be used for the next request object. The fourth parameter keeps
   *   the raw response object of an object representing [ListBooksResponse]{@link google.example.library.v1.ListBooksResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Book]{@link google.example.library.v1.Book}.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Book]{@link google.example.library.v1.Book} in a single response.
   *   The second element is the next request object if the response
   *   indicates the next page exists, or null. The third element is
   *   an object representing [ListBooksResponse]{@link google.example.library.v1.ListBooksResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * // Iterate over all elements.
   * var formattedName = client.shelfPath("[SHELF_ID]");
   *
   * client.listBooks({name: formattedName}).then(function(responses) {
   *     var resources = responses[0];
   *     for (var i = 0; i < resources.length; ++i) {
   *         // doThingsWith(resources[i])
   *     }
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   *
   * // Or obtain the paged response.
   * var formattedName = client.shelfPath("[SHELF_ID]");
   *
   *
   * var options = {autoPaginate: false};
   * function callback(responses) {
   *     // The actual resources in a response.
   *     var resources = responses[0];
   *     // The next request if the response shows there's more responses.
   *     var nextRequest = responses[1];
   *     // The actual response object, if necessary.
   *     // var rawResponse = responses[2];
   *     for (var i = 0; i < resources.length; ++i) {
   *         // doThingsWith(resources[i]);
   *     }
   *     if (nextRequest) {
   *         // Fetch the next page.
   *         return client.listBooks(nextRequest, options).then(callback);
   *     }
   * }
   * client.listBooks({name: formattedName}, options)
   *     .then(callback)
   *     .catch(function(err) {
   *         console.error(err);
   *     });
   */
  listBooks(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.listBooks(request, options, callback);
  };

  /**
   * Equivalent to {@link listBooks}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listBooks} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf whose books we'd like to list.
   * @param {number=} request.pageSize
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {string=} request.filter
   *   To test python built-in wrapping.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Book]{@link google.example.library.v1.Book} on 'data' event.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.shelfPath("[SHELF_ID]");
   * client.listBooksStream({name: formattedName})
   * .on('data', function(element) {
   *     // doThingsWith(element)
   * }).on('error', function(err) {
   *     console.log(err);
   * });
   */
  listBooksStream(request, options) {
    options = options || {};

    return this._pageDescriptors.listBooks.createStream(
      this._innerApiCalls.listBooks,
      request,
      options
    );
  };

  /**
   * Deletes a book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to delete.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @returns {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * client.deleteBook({name: formattedName}).catch(function(err) {
   *     console.error(err);
   * });
   */
  deleteBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.deleteBook(request, options, callback);
  };

  /**
   * Updates a book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to update.
   * @param {Object} request.book
   *   The book to update with.
   *
   *   This object should have the same structure as [Book]{@link google.example.library.v1.Book}
   * @param {Object=} request.updateMask
   *   A field mask to apply, rendered as an HTTP parameter.
   *
   *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}
   * @param {Object=} request.physicalMask
   *   To test Python import clash resolution.
   *
   *   This object should have the same structure as [FieldMask]{@link google.example.library.v1.FieldMask}
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Book]{@link google.example.library.v1.Book}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * var book = {};
   * var request = {
   *     name: formattedName,
   *     book: book
   * };
   * client.updateBook(request).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  updateBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.updateBook(request, options, callback);
  };

  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to move.
   * @param {string} request.otherShelfName
   *   The name of the destination shelf.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Book]{@link google.example.library.v1.Book}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
   * var request = {
   *     name: formattedName,
   *     otherShelfName: formattedOtherShelfName
   * };
   * client.moveBook(request).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  moveBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.moveBook(request, options, callback);
  };

  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string=} request.name
   * @param {number=} request.pageSize
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is Array of string.
   *
   *   When autoPaginate: false is specified through options, it contains the result
   *   in a single response. If the response indicates the next page exists, the third
   *   parameter is set to be used for the next request object. The fourth parameter keeps
   *   the raw response object of an object representing [ListStringsResponse]{@link google.example.library.v1.ListStringsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of string.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of string in a single response.
   *   The second element is the next request object if the response
   *   indicates the next page exists, or null. The third element is
   *   an object representing [ListStringsResponse]{@link google.example.library.v1.ListStringsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * // Iterate over all elements.
   * client.listStrings({}).then(function(responses) {
   *     var resources = responses[0];
   *     for (var i = 0; i < resources.length; ++i) {
   *         // doThingsWith(resources[i])
   *     }
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   *
   * // Or obtain the paged response.
   *
   * var options = {autoPaginate: false};
   * function callback(responses) {
   *     // The actual resources in a response.
   *     var resources = responses[0];
   *     // The next request if the response shows there's more responses.
   *     var nextRequest = responses[1];
   *     // The actual response object, if necessary.
   *     // var rawResponse = responses[2];
   *     for (var i = 0; i < resources.length; ++i) {
   *         // doThingsWith(resources[i]);
   *     }
   *     if (nextRequest) {
   *         // Fetch the next page.
   *         return client.listStrings(nextRequest, options).then(callback);
   *     }
   * }
   * client.listStrings({}, options)
   *     .then(callback)
   *     .catch(function(err) {
   *         console.error(err);
   *     });
   */
  listStrings(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.listStrings(request, options, callback);
  };

  /**
   * Equivalent to {@link listStrings}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listStrings} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string=} request.name
   * @param {number=} request.pageSize
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits a string on 'data' event.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   *
   * client.listStringsStream({})
   * .on('data', function(element) {
   *     // doThingsWith(element)
   * }).on('error', function(err) {
   *     console.log(err);
   * });
   */
  listStringsStream(request, options) {
    options = options || {};

    return this._pageDescriptors.listStrings.createStream(
      this._innerApiCalls.listStrings,
      request,
      options
    );
  };

  /**
   * Adds comments to a book
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   * @param {Object[]} request.comments
   *   This object should have the same structure as [Comment]{@link google.example.library.v1.Comment}
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @returns {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * var comment = '';
   * var stage = library.v1.types.Comment.Stage.UNSET;
   * var alignment = library.v1.types.SomeMessage2.SomeMessage3.Alignment.CHAR;
   * var commentsElement = {
   *     comment : comment,
   *     stage : stage,
   *     alignment : alignment
   * };
   * var comments = [commentsElement];
   * var request = {
   *     name: formattedName,
   *     comments: comments
   * };
   * client.addComments(request).catch(function(err) {
   *     console.error(err);
   * });
   */
  addComments(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.addComments(request, options, callback);
  };

  /**
   * Gets a book from an archive.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [BookFromArchive]{@link google.example.library.v1.BookFromArchive}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BookFromArchive]{@link google.example.library.v1.BookFromArchive}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.archivedBookPath("[ARCHIVE_PATH]", "[BOOK_ID]");
   * client.getBookFromArchive({name: formattedName}).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  getBookFromArchive(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBookFromArchive(request, options, callback);
  };

  /**
   * Gets a book from a shelf or archive.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {string} request.altBookName
   *   An alternate book name, used to test restricting flattened field to a
   *   single resource name type in a oneof.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [BookFromAnywhere]{@link google.example.library.v1.BookFromAnywhere}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BookFromAnywhere]{@link google.example.library.v1.BookFromAnywhere}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * var formattedAltBookName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * var request = {
   *     name: formattedName,
   *     altBookName: formattedAltBookName
   * };
   * client.getBookFromAnywhere(request).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  getBookFromAnywhere(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBookFromAnywhere(request, options, callback);
  };

  /**
   * Test proper OneOf-Any resource name mapping
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [BookFromAnywhere]{@link google.example.library.v1.BookFromAnywhere}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BookFromAnywhere]{@link google.example.library.v1.BookFromAnywhere}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * client.getBookFromAbsolutelyAnywhere({name: formattedName}).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  getBookFromAbsolutelyAnywhere(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBookFromAbsolutelyAnywhere(request, options, callback);
  };

  /**
   * Updates the index of a book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to update.
   * @param {string} request.indexName
   *   The name of the index for the book
   * @param {Object.<string, string>} request.indexMap
   *   The index to update the book with
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @returns {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * var indexName = 'default index';
   * var indexMapItem = '';
   * var indexMap = {'default_key' : indexMapItem,};
   * var request = {
   *     name: formattedName,
   *     indexName: indexName,
   *     indexMap: indexMap
   * };
   * client.updateBookIndex(request).catch(function(err) {
   *     console.error(err);
   * });
   */
  updateBookIndex(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.updateBookIndex(request, options, callback);
  };

  /**
   * Test server streaming
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * @param {Object=} request
   *   The request object that will be sent.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits [StreamShelvesResponse]{@link google.example.library.v1.StreamShelvesResponse} on 'data' event.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   *
   * client.streamShelves({}).on('data', function(response) {
   *   // doThingsWith(response)
   * });
   */
  streamShelves(request, options) {
    options = options || {};
    if (request === undefined) {
      request = {};
    }
    return this._innerApiCalls.streamShelves(request, options);
  };

  /**
   * Test server streaming, non-paged responses.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf whose books we'd like to list.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits [Book]{@link google.example.library.v1.Book} on 'data' event.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var name = '';
   * client.streamBooks({name: name}).on('data', function(response) {
   *   // doThingsWith(response)
   * });
   */
  streamBooks(request, options) {
    options = options || {};

    return this._innerApiCalls.streamBooks(request, options);
  };

  /**
   * Test bidi-streaming.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which is both readable and writable. It accepts objects
   *   representing [DiscussBookRequest]{@link google.example.library.v1.DiscussBookRequest} for write() method, and
   *   will emit objects representing [Comment]{@link google.example.library.v1.Comment} on 'data' event asynchronously.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var stream = client.discussBook().on('data', function(response) {
   *     // doThingsWith(response)
   * });
   * var name = '';
   * var request = {
   *     name : name
   * };
   * // Write request objects.
   * stream.write(request);
   */
  discussBook(options) {
    options = options || {};

    return this._innerApiCalls.discussBook(options);
  };

  /**
   * Test client streaming.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Comment]{@link google.example.library.v1.Comment}.
   * @returns {Stream} - A writable stream which accepts objects representing
   *   [DiscussBookRequest]{@link google.example.library.v1.DiscussBookRequest} for write() method.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var stream = client.monologAboutBook(function(err, response) {
   *     if (err) {
   *         console.error(err);
   *         return;
   *     }
   *     // doThingsWith(response)
   * });
   * var name = '';
   * var request = {
   *     name : name
   * };
   * // Write request objects.
   * stream.write(request);
   */
  monologAboutBook(options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.monologAboutBook(options, callback);
  };

  /**
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string[]} request.names
   * @param {string[]} request.shelves
   * @param {number=} request.pageSize
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is Array of string.
   *
   *   When autoPaginate: false is specified through options, it contains the result
   *   in a single response. If the response indicates the next page exists, the third
   *   parameter is set to be used for the next request object. The fourth parameter keeps
   *   the raw response object of an object representing [FindRelatedBooksResponse]{@link google.example.library.v1.FindRelatedBooksResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of string.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of string in a single response.
   *   The second element is the next request object if the response
   *   indicates the next page exists, or null. The third element is
   *   an object representing [FindRelatedBooksResponse]{@link google.example.library.v1.FindRelatedBooksResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * // Iterate over all elements.
   * var namesElement = '';
   * var names = [namesElement];
   * var shelves = [];
   * var request = {
   *     names: names,
   *     shelves: shelves
   * };
   *
   * client.findRelatedBooks(request).then(function(responses) {
   *     var resources = responses[0];
   *     for (var i = 0; i < resources.length; ++i) {
   *         // doThingsWith(resources[i])
   *     }
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   *
   * // Or obtain the paged response.
   * var namesElement = '';
   * var names = [namesElement];
   * var shelves = [];
   * var request = {
   *     names: names,
   *     shelves: shelves
   * };
   *
   *
   * var options = {autoPaginate: false};
   * function callback(responses) {
   *     // The actual resources in a response.
   *     var resources = responses[0];
   *     // The next request if the response shows there's more responses.
   *     var nextRequest = responses[1];
   *     // The actual response object, if necessary.
   *     // var rawResponse = responses[2];
   *     for (var i = 0; i < resources.length; ++i) {
   *         // doThingsWith(resources[i]);
   *     }
   *     if (nextRequest) {
   *         // Fetch the next page.
   *         return client.findRelatedBooks(nextRequest, options).then(callback);
   *     }
   * }
   * client.findRelatedBooks(request, options)
   *     .then(callback)
   *     .catch(function(err) {
   *         console.error(err);
   *     });
   */
  findRelatedBooks(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.findRelatedBooks(request, options, callback);
  };

  /**
   * Equivalent to {@link findRelatedBooks}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link findRelatedBooks} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string[]} request.names
   * @param {string[]} request.shelves
   * @param {number=} request.pageSize
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits a string on 'data' event.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var namesElement = '';
   * var names = [namesElement];
   * var shelves = [];
   * var request = {
   *     names: names,
   *     shelves: shelves
   * };
   * client.findRelatedBooksStream(request)
   * .on('data', function(element) {
   *     // doThingsWith(element)
   * }).on('error', function(err) {
   *     console.log(err);
   * });
   */
  findRelatedBooksStream(request, options) {
    options = options || {};

    return this._pageDescriptors.findRelatedBooks.createStream(
      this._innerApiCalls.findRelatedBooks,
      request,
      options
    );
  };

  /**
   * Adds a tag to the book. This RPC is a mixin.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource which the tag is being added to.
   *   Resource is usually specified as a path, such as,
   *   projects/{project}/zones/{zone}/disks/{disk}.
   * @param {string} request.tag
   *   REQUIRED: The tag to add.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [AddTagResponse]{@link google.tagger.v1.AddTagResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AddTagResponse]{@link google.tagger.v1.AddTagResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * var tag = '';
   * var request = {
   *     resource: formattedResource,
   *     tag: tag
   * };
   * client.addTag(request).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  addTag(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.addTag(request, options, callback);
  };

  /**
   * Adds a label to the entity.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource which the label is being added to.
   *   Resource is usually specified as a path, such as,
   *   projects/{project}/zones/{zone}/disks/{disk}.
   * @param {string} request.label
   *   REQUIRED: The label to add.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [AddLabelResponse]{@link google.tagger.v1.AddLabelResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AddLabelResponse]{@link google.tagger.v1.AddLabelResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   * var label = '';
   * var request = {
   *     resource: formattedResource,
   *     label: label
   * };
   * client.addLabel(request).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  addLabel(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.addLabel(request, options, callback);
  };

  /**
   * Test long-running operations
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   *
   * // Handle the operation using the promise pattern.
   * client.getBigBook({name: formattedName}).then(function(responses) {
   *     var operation = responses[0];
   *     var initialApiResponse = responses[1];
   *
   *     // Operation#promise starts polling for the completion of the LRO.
   *     return operation.promise();
   * }).then(function(responses) {
   *     // The final result of the operation.
   *     var result = responses[0];
   *
   *     // The metadata value of the completed operation.
   *     var metadata = responses[1];
   *
   *     // The response of the api call returning the complete operation.
   *     var finalApiResponse = responses[2];
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   *
   * // Handle the operation using the event emitter pattern.
   * client.getBigBook({name: formattedName}).then(function(responses) {
   *     var operation = responses[0];
   *     var initialApiResponse = responses[1];
   *
   *     // Adding a listener for the "complete" event starts polling for the
   *     // completion of the operation.
   *     operation.on('complete', function(result, metadata, finalApiResponse) {
   *       // doSomethingWith(result);
   *     });
   *
   *     // Adding a listener for the "progress" event causes the callback to be
   *     // called on any change in metadata when the operation is polled.
   *     operation.on('progress', function(metadata, apiResponse) {
   *       // doSomethingWith(metadata)
   *     })
   *
   *     // Adding a listener for the "error" event handles any errors found during polling.
   *     operation.on('error', function(err) {
   *       // throw(err);
   *     })
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  getBigBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBigBook(request, options, callback);
  };

  /**
   * Test long-running operations with empty return type.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   *
   * // Handle the operation using the promise pattern.
   * client.getBigNothing({name: formattedName}).then(function(responses) {
   *     var operation = responses[0];
   *     var initialApiResponse = responses[1];
   *
   *     // Operation#promise starts polling for the completion of the LRO.
   *     return operation.promise();
   * }).then(function(responses) {
   *     // The final result of the operation.
   *     var result = responses[0];
   *
   *     // The metadata value of the completed operation.
   *     var metadata = responses[1];
   *
   *     // The response of the api call returning the complete operation.
   *     var finalApiResponse = responses[2];
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   *
   * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
   *
   * // Handle the operation using the event emitter pattern.
   * client.getBigNothing({name: formattedName}).then(function(responses) {
   *     var operation = responses[0];
   *     var initialApiResponse = responses[1];
   *
   *     // Adding a listener for the "complete" event starts polling for the
   *     // completion of the operation.
   *     operation.on('complete', function(result, metadata, finalApiResponse) {
   *       // doSomethingWith(result);
   *     });
   *
   *     // Adding a listener for the "progress" event causes the callback to be
   *     // called on any change in metadata when the operation is polled.
   *     operation.on('progress', function(metadata, apiResponse) {
   *       // doSomethingWith(metadata)
   *     })
   *
   *     // Adding a listener for the "error" event handles any errors found during polling.
   *     operation.on('error', function(err) {
   *       // throw(err);
   *     })
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  getBigNothing(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBigNothing(request, options, callback);
  };

  /**
   * Test optional flattening parameters of all types
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} request.requiredSingularInt32
   * @param {number} request.requiredSingularInt64
   * @param {number} request.requiredSingularFloat
   * @param {number} request.requiredSingularDouble
   * @param {boolean} request.requiredSingularBool
   * @param {number} request.requiredSingularEnum
   *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
   * @param {string} request.requiredSingularString
   * @param {string} request.requiredSingularBytes
   * @param {Object} request.requiredSingularMessage
   *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
   * @param {string} request.requiredSingularResourceName
   * @param {string} request.requiredSingularResourceNameOneof
   * @param {number} request.requiredSingularFixed32
   * @param {number} request.requiredSingularFixed64
   * @param {number[]} request.requiredRepeatedInt32
   * @param {number[]} request.requiredRepeatedInt64
   * @param {number[]} request.requiredRepeatedFloat
   * @param {number[]} request.requiredRepeatedDouble
   * @param {boolean[]} request.requiredRepeatedBool
   * @param {number[]} request.requiredRepeatedEnum
   *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
   * @param {string[]} request.requiredRepeatedString
   * @param {string[]} request.requiredRepeatedBytes
   * @param {Object[]} request.requiredRepeatedMessage
   *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
   * @param {string[]} request.requiredRepeatedResourceName
   * @param {string[]} request.requiredRepeatedResourceNameOneof
   * @param {number[]} request.requiredRepeatedFixed32
   * @param {number[]} request.requiredRepeatedFixed64
   * @param {Object.<number, string>} request.requiredMap
   * @param {number=} request.optionalSingularInt32
   * @param {number=} request.optionalSingularInt64
   * @param {number=} request.optionalSingularFloat
   * @param {number=} request.optionalSingularDouble
   * @param {boolean=} request.optionalSingularBool
   * @param {number=} request.optionalSingularEnum
   *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
   * @param {string=} request.optionalSingularString
   * @param {string=} request.optionalSingularBytes
   * @param {Object=} request.optionalSingularMessage
   *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
   * @param {string=} request.optionalSingularResourceName
   * @param {string=} request.optionalSingularResourceNameOneof
   * @param {number=} request.optionalSingularFixed32
   * @param {number=} request.optionalSingularFixed64
   * @param {number[]=} request.optionalRepeatedInt32
   * @param {number[]=} request.optionalRepeatedInt64
   * @param {number[]=} request.optionalRepeatedFloat
   * @param {number[]=} request.optionalRepeatedDouble
   * @param {boolean[]=} request.optionalRepeatedBool
   * @param {number[]=} request.optionalRepeatedEnum
   *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
   * @param {string[]=} request.optionalRepeatedString
   * @param {string[]=} request.optionalRepeatedBytes
   * @param {Object[]=} request.optionalRepeatedMessage
   *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
   * @param {string[]=} request.optionalRepeatedResourceName
   * @param {string[]=} request.optionalRepeatedResourceNameOneof
   * @param {number[]=} request.optionalRepeatedFixed32
   * @param {number[]=} request.optionalRepeatedFixed64
   * @param {Object.<number, string>=} request.optionalMap
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestOptionalRequiredFlatteningParamsResponse]{@link google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestOptionalRequiredFlatteningParamsResponse]{@link google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * var library = require('@google-cloud/library');
   *
   * var client = library.v1({
   *   // optional auth parameters.
   * });
   *
   * var requiredSingularInt32 = 0;
   * var requiredSingularInt64 = 0;
   * var requiredSingularFloat = 0.0;
   * var requiredSingularDouble = 0.0;
   * var requiredSingularBool = false;
   * var requiredSingularEnum = library.v1.types.TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   * var requiredSingularString = '';
   * var requiredSingularBytes = '';
   * var requiredSingularMessage = {};
   * var requiredSingularResourceName = '';
   * var requiredSingularResourceNameOneof = '';
   * var requiredSingularFixed32 = 0;
   * var requiredSingularFixed64 = 0;
   * var requiredRepeatedInt32 = [];
   * var requiredRepeatedInt64 = [];
   * var requiredRepeatedFloat = [];
   * var requiredRepeatedDouble = [];
   * var requiredRepeatedBool = [];
   * var requiredRepeatedEnum = [];
   * var requiredRepeatedString = [];
   * var requiredRepeatedBytes = [];
   * var requiredRepeatedMessage = [];
   * var formattedRequiredRepeatedResourceName = [];
   * var formattedRequiredRepeatedResourceNameOneof = [];
   * var requiredRepeatedFixed32 = [];
   * var requiredRepeatedFixed64 = [];
   * var requiredMap = {};
   * var request = {
   *     requiredSingularInt32: requiredSingularInt32,
   *     requiredSingularInt64: requiredSingularInt64,
   *     requiredSingularFloat: requiredSingularFloat,
   *     requiredSingularDouble: requiredSingularDouble,
   *     requiredSingularBool: requiredSingularBool,
   *     requiredSingularEnum: requiredSingularEnum,
   *     requiredSingularString: requiredSingularString,
   *     requiredSingularBytes: requiredSingularBytes,
   *     requiredSingularMessage: requiredSingularMessage,
   *     requiredSingularResourceName: requiredSingularResourceName,
   *     requiredSingularResourceNameOneof: requiredSingularResourceNameOneof,
   *     requiredSingularFixed32: requiredSingularFixed32,
   *     requiredSingularFixed64: requiredSingularFixed64,
   *     requiredRepeatedInt32: requiredRepeatedInt32,
   *     requiredRepeatedInt64: requiredRepeatedInt64,
   *     requiredRepeatedFloat: requiredRepeatedFloat,
   *     requiredRepeatedDouble: requiredRepeatedDouble,
   *     requiredRepeatedBool: requiredRepeatedBool,
   *     requiredRepeatedEnum: requiredRepeatedEnum,
   *     requiredRepeatedString: requiredRepeatedString,
   *     requiredRepeatedBytes: requiredRepeatedBytes,
   *     requiredRepeatedMessage: requiredRepeatedMessage,
   *     requiredRepeatedResourceName: formattedRequiredRepeatedResourceName,
   *     requiredRepeatedResourceNameOneof: formattedRequiredRepeatedResourceNameOneof,
   *     requiredRepeatedFixed32: requiredRepeatedFixed32,
   *     requiredRepeatedFixed64: requiredRepeatedFixed64,
   *     requiredMap: requiredMap
   * };
   * client.testOptionalRequiredFlatteningParams(request).then(function(responses) {
   *     var response = responses[0];
   *     // doThingsWith(response)
   * })
   * .catch(function(err) {
   *     console.error(err);
   * });
   */
  testOptionalRequiredFlatteningParams(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.testOptionalRequiredFlatteningParams(request, options, callback);
  };
}


module.exports = LibraryServiceClient;

============== file: src/v1/library_service_client_config.json ==============
{
  "interfaces": {
    "google.example.library.v1.LibraryService": {
      "retry_codes": {
        "idempotent": [
          "DEADLINE_EXCEEDED",
          "UNAVAILABLE"
        ],
        "non_idempotent": []
      },
      "retry_params": {
        "default": {
          "initial_retry_delay_millis": 100,
          "retry_delay_multiplier": 1.2,
          "max_retry_delay_millis": 1000,
          "initial_rpc_timeout_millis": 300,
          "rpc_timeout_multiplier": 1.3,
          "max_rpc_timeout_millis": 3000,
          "total_timeout_millis": 30000
        }
      },
      "methods": {
        "CreateShelf": {
          "timeout_millis": 1000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetShelf": {
          "timeout_millis": 2000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "ListShelves": {
          "timeout_millis": 3000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DeleteShelf": {
          "timeout_millis": 4000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "MergeShelves": {
          "timeout_millis": 5000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "CreateBook": {
          "timeout_millis": 6000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "PublishSeries": {
          "timeout_millis": 7000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default",
          "bundling": {
            "element_count_threshold": 6,
            "element_count_limit": 7,
            "request_byte_threshold": 100000,
            "request_byte_limit": 150000,
            "delay_threshold_millis": 500
          }
        },
        "GetBook": {
          "timeout_millis": 8000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "ListBooks": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DeleteBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "UpdateBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "MoveBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "ListStrings": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "AddComments": {
          "timeout_millis": 10000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default",
          "bundling": {
            "element_count_threshold": 6,
            "request_byte_threshold": 100000,
            "delay_threshold_millis": 500
          }
        },
        "GetBookFromArchive": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "GetBookFromAnywhere": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "GetBookFromAbsolutelyAnywhere": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "UpdateBookIndex": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "StreamShelves": {
          "timeout_millis": 30000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "StreamBooks": {
          "timeout_millis": 30000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DiscussBook": {
          "timeout_millis": 30000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "MonologAboutBook": {
          "timeout_millis": 30000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "FindRelatedBooks": {
          "timeout_millis": 3000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "AddTag": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "AddLabel": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetBigBook": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetBigNothing": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "TestOptionalRequiredFlatteningParams": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        }
      }
    }
  }
}

============== file: test/gapic-v1.js ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';

var assert = require('assert');
var library = require('../src');
var through2 = require('through2');

var FAKE_STATUS_CODE = 1;
var error = new Error();
error.code = FAKE_STATUS_CODE;

describe('LibraryServiceClient', function() {
  describe('createShelf', function() {
    it('invokes createShelf without error', function(done) {
      var client = library.v1();

      // Mock request
      var shelf = {};
      var request = {
          shelf : shelf
      };

      // Mock response
      var name = 'name3373707';
      var theme = 'theme110327241';
      var internalTheme = 'internalTheme792518087';
      var expectedResponse = {
          name : name,
          theme : theme,
          internalTheme : internalTheme
      };

      // Mock Grpc layer
      client._createShelf = mockSimpleGrpcMethod(request, expectedResponse);

      client.createShelf(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createShelf with error', function(done) {
      var client = library.v1();

      // Mock request
      var shelf = {};
      var request = {
          shelf : shelf
      };

      // Mock Grpc layer
      client._createShelf = mockSimpleGrpcMethod(request, null, error);

      client.createShelf(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getShelf', function() {
    it('invokes getShelf without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var options = 'options-1249474914';
      var request = {
          name : formattedName,
          options : options
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var theme = 'theme110327241';
      var internalTheme = 'internalTheme792518087';
      var expectedResponse = {
          name : name2,
          theme : theme,
          internalTheme : internalTheme
      };

      // Mock Grpc layer
      client._getShelf = mockSimpleGrpcMethod(request, expectedResponse);

      client.getShelf(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getShelf with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var options = 'options-1249474914';
      var request = {
          name : formattedName,
          options : options
      };

      // Mock Grpc layer
      client._getShelf = mockSimpleGrpcMethod(request, null, error);

      client.getShelf(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('listShelves', function() {
    it('invokes listShelves without error', function(done) {
      var client = library.v1();

      // Mock request
      var request = {};

      // Mock response
      var nextPageToken = '';
      var shelvesElement = {};
      var shelves = [shelvesElement];
      var expectedResponse = {
          nextPageToken : nextPageToken,
          shelves : shelves
      };

      // Mock Grpc layer
      client._listShelves = function(actualRequest, options, callback) {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.shelves);
      };

      client.listShelves(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.shelves);
        done();
      });
    });

    it('invokes listShelves with error', function(done) {
      var client = library.v1();

      // Mock request
      var request = {};

      // Mock Grpc layer
      client._listShelves = mockSimpleGrpcMethod(request, null, error);

      client.listShelves(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('deleteShelf', function() {
    it('invokes deleteShelf without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._deleteShelf = mockSimpleGrpcMethod(request);

      client.deleteShelf(request, function(err) {
        assert.ifError(err);
        done();
      });
    });

    it('invokes deleteShelf with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._deleteShelf = mockSimpleGrpcMethod(request, null, error);

      client.deleteShelf(request, function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('mergeShelves', function() {
    it('invokes mergeShelves without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName,
          otherShelfName : formattedOtherShelfName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var theme = 'theme110327241';
      var internalTheme = 'internalTheme792518087';
      var expectedResponse = {
          name : name2,
          theme : theme,
          internalTheme : internalTheme
      };

      // Mock Grpc layer
      client._mergeShelves = mockSimpleGrpcMethod(request, expectedResponse);

      client.mergeShelves(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes mergeShelves with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName,
          otherShelfName : formattedOtherShelfName
      };

      // Mock Grpc layer
      client._mergeShelves = mockSimpleGrpcMethod(request, null, error);

      client.mergeShelves(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('createBook', function() {
    it('invokes createBook without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var book = {};
      var request = {
          name : formattedName,
          book : book
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._createBook = mockSimpleGrpcMethod(request, expectedResponse);

      client.createBook(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createBook with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var book = {};
      var request = {
          name : formattedName,
          book : book
      };

      // Mock Grpc layer
      client._createBook = mockSimpleGrpcMethod(request, null, error);

      client.createBook(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('publishSeries', function() {
    it('invokes publishSeries without error', function(done) {
      var client = library.v1();

      // Mock request
      var shelf = {};
      var books = [];
      var seriesString = 'foobar';
      var seriesUuid = {
          seriesString : seriesString
      };
      var request = {
          shelf : shelf,
          books : books,
          seriesUuid : seriesUuid
      };

      // Mock response
      var bookNamesElement = 'bookNamesElement1491670575';
      var bookNames = [bookNamesElement];
      var expectedResponse = {
          bookNames : bookNames
      };

      // Mock Grpc layer
      client._publishSeries = mockSimpleGrpcMethod(request, expectedResponse);

      client.publishSeries(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes publishSeries with error', function(done) {
      var client = library.v1();

      // Mock request
      var shelf = {};
      var books = [];
      var seriesString = 'foobar';
      var seriesUuid = {
          seriesString : seriesString
      };
      var request = {
          shelf : shelf,
          books : books,
          seriesUuid : seriesUuid
      };

      // Mock Grpc layer
      client._publishSeries = mockSimpleGrpcMethod(request, null, error);

      client.publishSeries(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBook', function() {
    it('invokes getBook without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._getBook = mockSimpleGrpcMethod(request, expectedResponse);

      client.getBook(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBook with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._getBook = mockSimpleGrpcMethod(request, null, error);

      client.getBook(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('listBooks', function() {
    it('invokes listBooks without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var nextPageToken = '';
      var booksElement = {};
      var books = [booksElement];
      var expectedResponse = {
          nextPageToken : nextPageToken,
          books : books
      };

      // Mock Grpc layer
      client._listBooks = function(actualRequest, options, callback) {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.books);
      };

      client.listBooks(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.books);
        done();
      });
    });

    it('invokes listBooks with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._listBooks = mockSimpleGrpcMethod(request, null, error);

      client.listBooks(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('deleteBook', function() {
    it('invokes deleteBook without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._deleteBook = mockSimpleGrpcMethod(request);

      client.deleteBook(request, function(err) {
        assert.ifError(err);
        done();
      });
    });

    it('invokes deleteBook with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._deleteBook = mockSimpleGrpcMethod(request, null, error);

      client.deleteBook(request, function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('updateBook', function() {
    it('invokes updateBook without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var book = {};
      var request = {
          name : formattedName,
          book : book
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._updateBook = mockSimpleGrpcMethod(request, expectedResponse);

      client.updateBook(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateBook with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var book = {};
      var request = {
          name : formattedName,
          book : book
      };

      // Mock Grpc layer
      client._updateBook = mockSimpleGrpcMethod(request, null, error);

      client.updateBook(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('moveBook', function() {
    it('invokes moveBook without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName,
          otherShelfName : formattedOtherShelfName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._moveBook = mockSimpleGrpcMethod(request, expectedResponse);

      client.moveBook(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes moveBook with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName,
          otherShelfName : formattedOtherShelfName
      };

      // Mock Grpc layer
      client._moveBook = mockSimpleGrpcMethod(request, null, error);

      client.moveBook(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('listStrings', function() {
    it('invokes listStrings without error', function(done) {
      var client = library.v1();

      // Mock request
      var request = {};

      // Mock response
      var nextPageToken = '';
      var stringsElement = 'stringsElement474465855';
      var strings = [stringsElement];
      var expectedResponse = {
          nextPageToken : nextPageToken,
          strings : strings
      };

      // Mock Grpc layer
      client._listStrings = function(actualRequest, options, callback) {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.strings);
      };

      client.listStrings(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.strings);
        done();
      });
    });

    it('invokes listStrings with error', function(done) {
      var client = library.v1();

      // Mock request
      var request = {};

      // Mock Grpc layer
      client._listStrings = mockSimpleGrpcMethod(request, null, error);

      client.listStrings(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('addComments', function() {
    it('invokes addComments without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var comment = '95';
      var stage = library.v1.types.Comment.Stage.UNSET;
      var alignment = library.v1.types.SomeMessage2.SomeMessage3.Alignment.CHAR;
      var commentsElement = {
          comment : comment,
          stage : stage,
          alignment : alignment
      };
      var comments = [commentsElement];
      var request = {
          name : formattedName,
          comments : comments
      };

      // Mock Grpc layer
      client._addComments = mockSimpleGrpcMethod(request);

      client.addComments(request, function(err) {
        assert.ifError(err);
        done();
      });
    });

    it('invokes addComments with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var comment = '95';
      var stage = library.v1.types.Comment.Stage.UNSET;
      var alignment = library.v1.types.SomeMessage2.SomeMessage3.Alignment.CHAR;
      var commentsElement = {
          comment : comment,
          stage : stage,
          alignment : alignment
      };
      var comments = [commentsElement];
      var request = {
          name : formattedName,
          comments : comments
      };

      // Mock Grpc layer
      client._addComments = mockSimpleGrpcMethod(request, null, error);

      client.addComments(request, function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBookFromArchive', function() {
    it('invokes getBookFromArchive without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.archivedBookPath("[ARCHIVE_PATH]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._getBookFromArchive = mockSimpleGrpcMethod(request, expectedResponse);

      client.getBookFromArchive(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBookFromArchive with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.archivedBookPath("[ARCHIVE_PATH]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._getBookFromArchive = mockSimpleGrpcMethod(request, null, error);

      client.getBookFromArchive(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBookFromAnywhere', function() {
    it('invokes getBookFromAnywhere without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var formattedAltBookName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName,
          altBookName : formattedAltBookName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._getBookFromAnywhere = mockSimpleGrpcMethod(request, expectedResponse);

      client.getBookFromAnywhere(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBookFromAnywhere with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var formattedAltBookName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName,
          altBookName : formattedAltBookName
      };

      // Mock Grpc layer
      client._getBookFromAnywhere = mockSimpleGrpcMethod(request, null, error);

      client.getBookFromAnywhere(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBookFromAbsolutelyAnywhere', function() {
    it('invokes getBookFromAbsolutelyAnywhere without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._getBookFromAbsolutelyAnywhere = mockSimpleGrpcMethod(request, expectedResponse);

      client.getBookFromAbsolutelyAnywhere(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBookFromAbsolutelyAnywhere with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._getBookFromAbsolutelyAnywhere = mockSimpleGrpcMethod(request, null, error);

      client.getBookFromAbsolutelyAnywhere(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('updateBookIndex', function() {
    it('invokes updateBookIndex without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var indexName = 'default index';
      var indexMapItem = 'indexMapItem1918721251';
      var indexMap = {'default_key' : indexMapItem,};
      var request = {
          name : formattedName,
          indexName : indexName,
          indexMap : indexMap
      };

      // Mock Grpc layer
      client._updateBookIndex = mockSimpleGrpcMethod(request);

      client.updateBookIndex(request, function(err) {
        assert.ifError(err);
        done();
      });
    });

    it('invokes updateBookIndex with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var indexName = 'default index';
      var indexMapItem = 'indexMapItem1918721251';
      var indexMap = {'default_key' : indexMapItem,};
      var request = {
          name : formattedName,
          indexName : indexName,
          indexMap : indexMap
      };

      // Mock Grpc layer
      client._updateBookIndex = mockSimpleGrpcMethod(request, null, error);

      client.updateBookIndex(request, function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('streamShelves', function() {
    it('invokes streamShelves without error', function(done) {
      var client = library.v1();

      // Mock request
      var request = {};

      // Mock response
      var shelvesElement = {};
      var shelves = [shelvesElement];
      var expectedResponse = {
          shelves : shelves
      };

      // Mock Grpc layer
      client._streamShelves = mockServerStreamingGrpcMethod(request, expectedResponse);

      var stream = client.streamShelves(request);
      stream.on('data', function(response) {
        assert.deepStrictEqual(response, expectedResponse);
        done()
      });
      stream.on('error', function(err) {
        done(err);
      });

      stream.write();
    });

    it('invokes streamShelves with error', function(done) {
      var client = library.v1();

      // Mock request
      var request = {};

      // Mock Grpc layer
      client._streamShelves = mockServerStreamingGrpcMethod(request, null, error);

      var stream = client.streamShelves(request);
      stream.on('data', function(response) {
        assert.fail();
      })
      stream.on('error', function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });

      stream.write();
    });
  });

  describe('streamBooks', function() {
    it('invokes streamBooks without error', function(done) {
      var client = library.v1();

      // Mock request
      var name = 'name3373707';
      var request = {
          name : name
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._streamBooks = mockServerStreamingGrpcMethod(request, expectedResponse);

      var stream = client.streamBooks(request);
      stream.on('data', function(response) {
        assert.deepStrictEqual(response, expectedResponse);
        done()
      });
      stream.on('error', function(err) {
        done(err);
      });

      stream.write();
    });

    it('invokes streamBooks with error', function(done) {
      var client = library.v1();

      // Mock request
      var name = 'name3373707';
      var request = {
          name : name
      };

      // Mock Grpc layer
      client._streamBooks = mockServerStreamingGrpcMethod(request, null, error);

      var stream = client.streamBooks(request);
      stream.on('data', function(response) {
        assert.fail();
      })
      stream.on('error', function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });

      stream.write();
    });
  });

  describe('discussBook', function() {
    it('invokes discussBook without error', function(done) {
      var client = library.v1();

      // Mock request
      var name = 'name3373707';
      var request = {
          name : name
      };

      // Mock response
      var userName = 'userName339340927';
      var comment = '95';
      var expectedResponse = {
          userName : userName,
          comment : comment
      };

      // Mock Grpc layer
      client._discussBook = mockBidiStreamingGrpcMethod(request, expectedResponse);

      var stream = client.discussBook().on('data', function(response) {
        assert.deepStrictEqual(response, expectedResponse);
        done()
      }).on('error', function(err) {
        done(err);
      });

      stream.write(request);
    });

    it('invokes discussBook with error', function(done) {
      var client = library.v1();

      // Mock request
      var name = 'name3373707';
      var request = {
          name : name
      };

      // Mock Grpc layer
      client._discussBook = mockBidiStreamingGrpcMethod(request, null, error);

      var stream = client.discussBook().on('data', function(response) {
        assert.fail();
      }).on('error', function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });

      stream.write(request);
    });
  });

  describe('findRelatedBooks', function() {
    it('invokes findRelatedBooks without error', function(done) {
      var client = library.v1();

      // Mock request
      var namesElement = 'namesElement-249113339';
      var names = [namesElement];
      var shelves = [];
      var request = {
          names : names,
          shelves : shelves
      };

      // Mock response
      var nextPageToken = '';
      var namesElement2 = 'namesElement21120252792';
      var names2 = [namesElement2];
      var expectedResponse = {
          nextPageToken : nextPageToken,
          names : names2
      };

      // Mock Grpc layer
      client._findRelatedBooks = function(actualRequest, options, callback) {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.names);
      };

      client.findRelatedBooks(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.names);
        done();
      });
    });

    it('invokes findRelatedBooks with error', function(done) {
      var client = library.v1();

      // Mock request
      var namesElement = 'namesElement-249113339';
      var names = [namesElement];
      var shelves = [];
      var request = {
          names : names,
          shelves : shelves
      };

      // Mock Grpc layer
      client._findRelatedBooks = mockSimpleGrpcMethod(request, null, error);

      client.findRelatedBooks(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('addTag', function() {
    it('invokes addTag without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var tag = 'tag114586';
      var request = {
          resource : formattedResource,
          tag : tag
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._addTag = mockSimpleGrpcMethod(request, expectedResponse);

      client.addTag(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes addTag with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var tag = 'tag114586';
      var request = {
          resource : formattedResource,
          tag : tag
      };

      // Mock Grpc layer
      client._addTag = mockSimpleGrpcMethod(request, null, error);

      client.addTag(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('addLabel', function() {
    it('invokes addLabel without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var label = 'label102727412';
      var request = {
          resource : formattedResource,
          label : label
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._addLabel = mockSimpleGrpcMethod(request, expectedResponse);

      client.addLabel(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes addLabel with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var label = 'label102727412';
      var request = {
          resource : formattedResource,
          label : label
      };

      // Mock Grpc layer
      client._addLabel = mockSimpleGrpcMethod(request, null, error);

      client.addLabel(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBigBook', function() {
    it('invokes getBigBook without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._getBigBook = mockLongRunningGrpcMethod(request, expectedResponse);

      client.getBigBook(request).then(function(responses) {
        var operation = responses[0];
        return operation.promise();
      }).then(function(responses) {
        assert.deepStrictEqual(responses[0], expectedResponse);
        done();
      }).catch(function(err) {
        done(err);
      });
    });

    it('invokes getBigBook with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._getBigBook = mockLongRunningGrpcMethod(request, null, error);

      client.getBigBook(request).then(function(responses) {
        var operation = responses[0];
        return operation.promise();
      }).then(function(responses) {
        assert.fail();
      }).catch(function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });

    it('has longrunning decoder functions', function() {
      var client = library.v1();
      assert(client.longrunningDescriptors.getBigBook.responseDecoder instanceof Function);
      assert(client.longrunningDescriptors.getBigBook.metadataDecoder instanceof Function);
    });
  });

  describe('getBigNothing', function() {
    it('invokes getBigNothing without error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._getBigNothing = mockLongRunningGrpcMethod(request, expectedResponse);

      client.getBigNothing(request).then(function(responses) {
        var operation = responses[0];
        return operation.promise();
      }).then(function(responses) {
        assert.deepStrictEqual(responses[0], expectedResponse);
        done();
      }).catch(function(err) {
        done(err);
      });
    });

    it('invokes getBigNothing with error', function(done) {
      var client = library.v1();

      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._getBigNothing = mockLongRunningGrpcMethod(request, null, error);

      client.getBigNothing(request).then(function(responses) {
        var operation = responses[0];
        return operation.promise();
      }).then(function(responses) {
        assert.fail();
      }).catch(function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });

    it('has longrunning decoder functions', function() {
      var client = library.v1();
      assert(client.longrunningDescriptors.getBigNothing.responseDecoder instanceof Function);
      assert(client.longrunningDescriptors.getBigNothing.metadataDecoder instanceof Function);
    });
  });

  describe('testOptionalRequiredFlatteningParams', function() {
    it('invokes testOptionalRequiredFlatteningParams without error', function(done) {
      var client = library.v1();

      // Mock request
      var requiredSingularInt32 = -72313594;
      var requiredSingularInt64 = -72313499;
      var requiredSingularFloat = -7514705.0;
      var requiredSingularDouble = 1.9111005E8;
      var requiredSingularBool = true;
      var requiredSingularEnum = library.v1.types.TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      var requiredSingularString = 'requiredSingularString-1949894503';
      var requiredSingularBytes = '-29';
      var requiredSingularMessage = {};
      var requiredSingularResourceName = 'requiredSingularResourceName-1701575020';
      var requiredSingularResourceNameOneof = 'requiredSingularResourceNameOneof-25303726';
      var requiredSingularFixed32 = 720656715;
      var requiredSingularFixed64 = 720656810;
      var requiredRepeatedInt32 = [];
      var requiredRepeatedInt64 = [];
      var requiredRepeatedFloat = [];
      var requiredRepeatedDouble = [];
      var requiredRepeatedBool = [];
      var requiredRepeatedEnum = [];
      var requiredRepeatedString = [];
      var requiredRepeatedBytes = [];
      var requiredRepeatedMessage = [];
      var formattedRequiredRepeatedResourceName = [];
      var formattedRequiredRepeatedResourceNameOneof = [];
      var requiredRepeatedFixed32 = [];
      var requiredRepeatedFixed64 = [];
      var requiredMap = {};
      var request = {
          requiredSingularInt32 : requiredSingularInt32,
          requiredSingularInt64 : requiredSingularInt64,
          requiredSingularFloat : requiredSingularFloat,
          requiredSingularDouble : requiredSingularDouble,
          requiredSingularBool : requiredSingularBool,
          requiredSingularEnum : requiredSingularEnum,
          requiredSingularString : requiredSingularString,
          requiredSingularBytes : requiredSingularBytes,
          requiredSingularMessage : requiredSingularMessage,
          requiredSingularResourceName : requiredSingularResourceName,
          requiredSingularResourceNameOneof : requiredSingularResourceNameOneof,
          requiredSingularFixed32 : requiredSingularFixed32,
          requiredSingularFixed64 : requiredSingularFixed64,
          requiredRepeatedInt32 : requiredRepeatedInt32,
          requiredRepeatedInt64 : requiredRepeatedInt64,
          requiredRepeatedFloat : requiredRepeatedFloat,
          requiredRepeatedDouble : requiredRepeatedDouble,
          requiredRepeatedBool : requiredRepeatedBool,
          requiredRepeatedEnum : requiredRepeatedEnum,
          requiredRepeatedString : requiredRepeatedString,
          requiredRepeatedBytes : requiredRepeatedBytes,
          requiredRepeatedMessage : requiredRepeatedMessage,
          requiredRepeatedResourceName : formattedRequiredRepeatedResourceName,
          requiredRepeatedResourceNameOneof : formattedRequiredRepeatedResourceNameOneof,
          requiredRepeatedFixed32 : requiredRepeatedFixed32,
          requiredRepeatedFixed64 : requiredRepeatedFixed64,
          requiredMap : requiredMap
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._testOptionalRequiredFlatteningParams = mockSimpleGrpcMethod(request, expectedResponse);

      client.testOptionalRequiredFlatteningParams(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes testOptionalRequiredFlatteningParams with error', function(done) {
      var client = library.v1();

      // Mock request
      var requiredSingularInt32 = -72313594;
      var requiredSingularInt64 = -72313499;
      var requiredSingularFloat = -7514705.0;
      var requiredSingularDouble = 1.9111005E8;
      var requiredSingularBool = true;
      var requiredSingularEnum = library.v1.types.TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      var requiredSingularString = 'requiredSingularString-1949894503';
      var requiredSingularBytes = '-29';
      var requiredSingularMessage = {};
      var requiredSingularResourceName = 'requiredSingularResourceName-1701575020';
      var requiredSingularResourceNameOneof = 'requiredSingularResourceNameOneof-25303726';
      var requiredSingularFixed32 = 720656715;
      var requiredSingularFixed64 = 720656810;
      var requiredRepeatedInt32 = [];
      var requiredRepeatedInt64 = [];
      var requiredRepeatedFloat = [];
      var requiredRepeatedDouble = [];
      var requiredRepeatedBool = [];
      var requiredRepeatedEnum = [];
      var requiredRepeatedString = [];
      var requiredRepeatedBytes = [];
      var requiredRepeatedMessage = [];
      var formattedRequiredRepeatedResourceName = [];
      var formattedRequiredRepeatedResourceNameOneof = [];
      var requiredRepeatedFixed32 = [];
      var requiredRepeatedFixed64 = [];
      var requiredMap = {};
      var request = {
          requiredSingularInt32 : requiredSingularInt32,
          requiredSingularInt64 : requiredSingularInt64,
          requiredSingularFloat : requiredSingularFloat,
          requiredSingularDouble : requiredSingularDouble,
          requiredSingularBool : requiredSingularBool,
          requiredSingularEnum : requiredSingularEnum,
          requiredSingularString : requiredSingularString,
          requiredSingularBytes : requiredSingularBytes,
          requiredSingularMessage : requiredSingularMessage,
          requiredSingularResourceName : requiredSingularResourceName,
          requiredSingularResourceNameOneof : requiredSingularResourceNameOneof,
          requiredSingularFixed32 : requiredSingularFixed32,
          requiredSingularFixed64 : requiredSingularFixed64,
          requiredRepeatedInt32 : requiredRepeatedInt32,
          requiredRepeatedInt64 : requiredRepeatedInt64,
          requiredRepeatedFloat : requiredRepeatedFloat,
          requiredRepeatedDouble : requiredRepeatedDouble,
          requiredRepeatedBool : requiredRepeatedBool,
          requiredRepeatedEnum : requiredRepeatedEnum,
          requiredRepeatedString : requiredRepeatedString,
          requiredRepeatedBytes : requiredRepeatedBytes,
          requiredRepeatedMessage : requiredRepeatedMessage,
          requiredRepeatedResourceName : formattedRequiredRepeatedResourceName,
          requiredRepeatedResourceNameOneof : formattedRequiredRepeatedResourceNameOneof,
          requiredRepeatedFixed32 : requiredRepeatedFixed32,
          requiredRepeatedFixed64 : requiredRepeatedFixed64,
          requiredMap : requiredMap
      };

      // Mock Grpc layer
      client._testOptionalRequiredFlatteningParams = mockSimpleGrpcMethod(request, null, error);

      client.testOptionalRequiredFlatteningParams(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

});

function mockSimpleGrpcMethod(expectedRequest, response, error) {
  return function(actualRequest, options, callback) {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    if (error) {
      callback(error);
    } else if (response) {
      callback(null, response);
    } else {
      callback(null);
    }
  };
}

function mockServerStreamingGrpcMethod(expectedRequest, response, error) {
  return function(actualRequest) {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    var mockStream = through2.obj(function (chunk, enc, callback) {
      if (error) {
        callback(error);
      } else {
        callback(null, response);
      }
    });
    return mockStream;
  };
}

function mockBidiStreamingGrpcMethod(expectedRequest, response, error) {
  return function() {
    var mockStream = through2.obj(function (chunk, enc, callback) {
      assert.deepStrictEqual(chunk, expectedRequest);
      if (error) {
        callback(error);
      } else {
        callback(null, response);
      }
    });
    return mockStream;
  }
}

function mockLongRunningGrpcMethod(expectedRequest, response, error) {
  return function(request) {
    assert.deepStrictEqual(request, expectedRequest);
    var mockOperation = {
      promise: function() {
        return new Promise(function(resolve, reject) {
          if (error) {
            reject(error);
          } else {
            resolve([response]);
          }
        });
      }
    };
    return Promise.resolve([mockOperation]);
  };
}

